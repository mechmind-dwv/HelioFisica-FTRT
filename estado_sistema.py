# estado_sistema.py - Reporte completo del sistema
from datetime import datetime
import sys
import os

def generar_reporte_estado():
    """Genera reporte completo del estado del sistema FTRT"""
    
    print("üåå REPORTE DE ESTADO - SISTEMA FTRT")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("")
    
    # Verificar m√≥dulos principales
    modulos = {
        'FTRT Core': 'ftrt_core.py',
        'Base Datos': 'historical_database.py', 
        'Motor Predicci√≥n': 'prediction_engine.py',
        'Validaci√≥n': 'validation_simple.py',
        'API': 'api/main.py',
        'Interfaz': 'interactive_ftrt.py'
    }
    
    print("üìÅ M√ìDULOS PRINCIPALES:")
    for nombre, archivo in modulos.items():
        estado = "‚úÖ" if os.path.exists(archivo) else "‚ùå"
        print(f"   {estado} {nombre}: {archivo}")
    
    # Verificar datos hist√≥ricos
    print("\nüìö DATOS HIST√ìRICOS:")
    try:
        from historical_database import HISTORICAL_EVENTS, FTRT_HISTORICAL_DATA
        print(f"   ‚úÖ Eventos cargados: {len(HISTORICAL_EVENTS)}")
        print(f"   ‚úÖ Datos FTRT: {len(FTRT_HISTORICAL_DATA)}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Probar c√°lculo b√°sico
    print("\nüßÆ C√ÅLCULO B√ÅSICO:")
    try:
        from datetime import datetime
        from ftrt_core import FTRTCalculator
        calc = FTRTCalculator()
        resultado = calc.calcular_ftrt_total(datetime.now())
        ftrt = resultado.get('ftrt_normalizada', 0)
        print(f"   ‚úÖ FTRT actual: {ftrt:.3f}")
    except Exception as e:
        print(f"   ‚ùå Error c√°lculo: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ RECOMENDACIONES INMEDIATAS:")
    print("   1. Ejecutar: python validation_simple.py")
    print("   2. Probar: python interactive_ftrt.py") 
    print("   3. Verificar: ./magia_super_facil.sh")
    print("=" * 60)

if __name__ == "__main__":
    generar_reporte_estado()
